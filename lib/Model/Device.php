<?php
/**
 * Device
 *
 * PHP version 5
 *
 * @category Class
 * @package  Crhg\RemoClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nature API
 *
 * Read/Write Nature Remo
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Crhg\RemoClient\Model;

use \ArrayAccess;
use \Crhg\RemoClient\ObjectSerializer;

/**
 * Device Class Doc Comment
 *
 * @category Class
 * @package  Crhg\RemoClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Device implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '\Crhg\RemoClient\Model\Id',
        'name' => 'string',
        'temperature_offset' => 'float',
        'humidity_offset' => 'float',
        'created_at' => '\Crhg\RemoClient\Model\\DateTime',
        'updated_at' => '\Crhg\RemoClient\Model\\DateTime',
        'firmware_version' => 'string',
        'newest_events' => '\Crhg\RemoClient\Model\DeviceNewestEvents'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'temperature_offset' => null,
        'humidity_offset' => null,
        'created_at' => null,
        'updated_at' => null,
        'firmware_version' => null,
        'newest_events' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'temperature_offset' => 'temperature_offset',
        'humidity_offset' => 'humidity_offset',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'firmware_version' => 'firmware_version',
        'newest_events' => 'newest_events'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'temperature_offset' => 'setTemperatureOffset',
        'humidity_offset' => 'setHumidityOffset',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'firmware_version' => 'setFirmwareVersion',
        'newest_events' => 'setNewestEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'temperature_offset' => 'getTemperatureOffset',
        'humidity_offset' => 'getHumidityOffset',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'firmware_version' => 'getFirmwareVersion',
        'newest_events' => 'getNewestEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['temperature_offset'] = isset($data['temperature_offset']) ? $data['temperature_offset'] : null;
        $this->container['humidity_offset'] = isset($data['humidity_offset']) ? $data['humidity_offset'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['firmware_version'] = isset($data['firmware_version']) ? $data['firmware_version'] : null;
        $this->container['newest_events'] = isset($data['newest_events']) ? $data['newest_events'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return \Crhg\RemoClient\Model\Id
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Crhg\RemoClient\Model\Id $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets temperature_offset
     *
     * @return float
     */
    public function getTemperatureOffset()
    {
        return $this->container['temperature_offset'];
    }

    /**
     * Sets temperature_offset
     *
     * @param float $temperature_offset temperature_offset
     *
     * @return $this
     */
    public function setTemperatureOffset($temperature_offset)
    {
        $this->container['temperature_offset'] = $temperature_offset;

        return $this;
    }

    /**
     * Gets humidity_offset
     *
     * @return float
     */
    public function getHumidityOffset()
    {
        return $this->container['humidity_offset'];
    }

    /**
     * Sets humidity_offset
     *
     * @param float $humidity_offset humidity_offset
     *
     * @return $this
     */
    public function setHumidityOffset($humidity_offset)
    {
        $this->container['humidity_offset'] = $humidity_offset;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \Crhg\RemoClient\Model\\DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \Crhg\RemoClient\Model\\DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \Crhg\RemoClient\Model\\DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \Crhg\RemoClient\Model\\DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets firmware_version
     *
     * @return string
     */
    public function getFirmwareVersion()
    {
        return $this->container['firmware_version'];
    }

    /**
     * Sets firmware_version
     *
     * @param string $firmware_version firmware_version
     *
     * @return $this
     */
    public function setFirmwareVersion($firmware_version)
    {
        $this->container['firmware_version'] = $firmware_version;

        return $this;
    }

    /**
     * Gets newest_events
     *
     * @return \Crhg\RemoClient\Model\DeviceNewestEvents
     */
    public function getNewestEvents()
    {
        return $this->container['newest_events'];
    }

    /**
     * Sets newest_events
     *
     * @param \Crhg\RemoClient\Model\DeviceNewestEvents $newest_events newest_events
     *
     * @return $this
     */
    public function setNewestEvents($newest_events)
    {
        $this->container['newest_events'] = $newest_events;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


