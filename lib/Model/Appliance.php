<?php
/**
 * Appliance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Crhg\RemoClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nature API
 *
 * Read/Write Nature Remo
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Crhg\RemoClient\Model;

use \ArrayAccess;
use \Crhg\RemoClient\ObjectSerializer;

/**
 * Appliance Class Doc Comment
 *
 * @category Class
 * @package  Crhg\RemoClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Appliance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Appliance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '\Crhg\RemoClient\Model\Id',
        'device' => '\Crhg\RemoClient\Model\DeviceCore',
        'model' => '\Crhg\RemoClient\Model\ApplianceModel',
        'nickname' => 'string',
        'image' => '\Crhg\RemoClient\Model\Image',
        'type' => '\Crhg\RemoClient\Model\ApplianceType',
        'settings' => '\Crhg\RemoClient\Model\AirConParams',
        'aircon' => '\Crhg\RemoClient\Model\AirCon',
        'signals' => '\Crhg\RemoClient\Model\Signal[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'device' => null,
        'model' => null,
        'nickname' => null,
        'image' => null,
        'type' => null,
        'settings' => null,
        'aircon' => null,
        'signals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'device' => 'device',
        'model' => 'model',
        'nickname' => 'nickname',
        'image' => 'image',
        'type' => 'type',
        'settings' => 'settings',
        'aircon' => 'aircon',
        'signals' => 'signals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'device' => 'setDevice',
        'model' => 'setModel',
        'nickname' => 'setNickname',
        'image' => 'setImage',
        'type' => 'setType',
        'settings' => 'setSettings',
        'aircon' => 'setAircon',
        'signals' => 'setSignals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'device' => 'getDevice',
        'model' => 'getModel',
        'nickname' => 'getNickname',
        'image' => 'getImage',
        'type' => 'getType',
        'settings' => 'getSettings',
        'aircon' => 'getAircon',
        'signals' => 'getSignals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['aircon'] = isset($data['aircon']) ? $data['aircon'] : null;
        $this->container['signals'] = isset($data['signals']) ? $data['signals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return \Crhg\RemoClient\Model\Id
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Crhg\RemoClient\Model\Id $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \Crhg\RemoClient\Model\DeviceCore
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \Crhg\RemoClient\Model\DeviceCore $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \Crhg\RemoClient\Model\ApplianceModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \Crhg\RemoClient\Model\ApplianceModel $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname nickname
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Crhg\RemoClient\Model\Image
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Crhg\RemoClient\Model\Image $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Crhg\RemoClient\Model\ApplianceType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Crhg\RemoClient\Model\ApplianceType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Crhg\RemoClient\Model\AirConParams
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Crhg\RemoClient\Model\AirConParams $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets aircon
     *
     * @return \Crhg\RemoClient\Model\AirCon
     */
    public function getAircon()
    {
        return $this->container['aircon'];
    }

    /**
     * Sets aircon
     *
     * @param \Crhg\RemoClient\Model\AirCon $aircon aircon
     *
     * @return $this
     */
    public function setAircon($aircon)
    {
        $this->container['aircon'] = $aircon;

        return $this;
    }

    /**
     * Gets signals
     *
     * @return \Crhg\RemoClient\Model\Signal[]
     */
    public function getSignals()
    {
        return $this->container['signals'];
    }

    /**
     * Sets signals
     *
     * @param \Crhg\RemoClient\Model\Signal[] $signals signals
     *
     * @return $this
     */
    public function setSignals($signals)
    {
        $this->container['signals'] = $signals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


