<?php
/**
 * AirConRangeModes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Crhg\RemoClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nature API
 *
 * Read/Write Nature Remo
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Crhg\RemoClient\Model;

use \ArrayAccess;
use \Crhg\RemoClient\ObjectSerializer;

/**
 * AirConRangeModes Class Doc Comment
 *
 * @category Class
 * @package  Crhg\RemoClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AirConRangeModes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AirCon_range_modes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cool' => '\Crhg\RemoClient\Model\AirConRangeMode',
        'warm' => '\Crhg\RemoClient\Model\AirConRangeMode',
        'dry' => '\Crhg\RemoClient\Model\AirConRangeMode',
        'blow' => '\Crhg\RemoClient\Model\AirConRangeMode',
        'auto' => '\Crhg\RemoClient\Model\AirConRangeMode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cool' => null,
        'warm' => null,
        'dry' => null,
        'blow' => null,
        'auto' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cool' => 'cool',
        'warm' => 'warm',
        'dry' => 'dry',
        'blow' => 'blow',
        'auto' => 'auto'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cool' => 'setCool',
        'warm' => 'setWarm',
        'dry' => 'setDry',
        'blow' => 'setBlow',
        'auto' => 'setAuto'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cool' => 'getCool',
        'warm' => 'getWarm',
        'dry' => 'getDry',
        'blow' => 'getBlow',
        'auto' => 'getAuto'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cool'] = isset($data['cool']) ? $data['cool'] : null;
        $this->container['warm'] = isset($data['warm']) ? $data['warm'] : null;
        $this->container['dry'] = isset($data['dry']) ? $data['dry'] : null;
        $this->container['blow'] = isset($data['blow']) ? $data['blow'] : null;
        $this->container['auto'] = isset($data['auto']) ? $data['auto'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets cool
     *
     * @return \Crhg\RemoClient\Model\AirConRangeMode
     */
    public function getCool()
    {
        return $this->container['cool'];
    }

    /**
     * Sets cool
     *
     * @param \Crhg\RemoClient\Model\AirConRangeMode $cool cool
     *
     * @return $this
     */
    public function setCool($cool)
    {
        $this->container['cool'] = $cool;

        return $this;
    }

    /**
     * Gets warm
     *
     * @return \Crhg\RemoClient\Model\AirConRangeMode
     */
    public function getWarm()
    {
        return $this->container['warm'];
    }

    /**
     * Sets warm
     *
     * @param \Crhg\RemoClient\Model\AirConRangeMode $warm warm
     *
     * @return $this
     */
    public function setWarm($warm)
    {
        $this->container['warm'] = $warm;

        return $this;
    }

    /**
     * Gets dry
     *
     * @return \Crhg\RemoClient\Model\AirConRangeMode
     */
    public function getDry()
    {
        return $this->container['dry'];
    }

    /**
     * Sets dry
     *
     * @param \Crhg\RemoClient\Model\AirConRangeMode $dry dry
     *
     * @return $this
     */
    public function setDry($dry)
    {
        $this->container['dry'] = $dry;

        return $this;
    }

    /**
     * Gets blow
     *
     * @return \Crhg\RemoClient\Model\AirConRangeMode
     */
    public function getBlow()
    {
        return $this->container['blow'];
    }

    /**
     * Sets blow
     *
     * @param \Crhg\RemoClient\Model\AirConRangeMode $blow blow
     *
     * @return $this
     */
    public function setBlow($blow)
    {
        $this->container['blow'] = $blow;

        return $this;
    }

    /**
     * Gets auto
     *
     * @return \Crhg\RemoClient\Model\AirConRangeMode
     */
    public function getAuto()
    {
        return $this->container['auto'];
    }

    /**
     * Sets auto
     *
     * @param \Crhg\RemoClient\Model\AirConRangeMode $auto auto
     *
     * @return $this
     */
    public function setAuto($auto)
    {
        $this->container['auto'] = $auto;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


